
----- 1 -----

(a)
% get_klada(D+, Xs+, NewXs-, Kladas-)
% predikat nalezne prave jednu mnozinu klad kterou lze z jednoho tramu delky D narezat
% Vraci `Kladas` narezane klady a `NewXs` zbyle klady (NewXs sjednoceno s Kladas = Xs) 
get_klada(_, [], [], []).
get_klada(D, [X | Xs], NewXs, [X | Kladas]) :- 
    X =< D, !,
    DminX is D - X,
    get_klada(DminX, Xs, NewXs, Kladas).
get_klada(D, [X | Xs], [X | NewXs], Kladas) :-
    get_klada(D, Xs, NewXs, Kladas).

valid_kladas(_, []) :- !.
valid_kladas(D, [K | Kladas]) :- D >= K, valid_kladas(D, Kladas). 


internal_rezy(_, [], 0, []) :- !.
internal_rezy(D, Xs, N, [Kladas | KladasList]) :-
    get_klada(D, Xs, NewXs, Kladas),
    rezy(D, NewXs, RecN, KladasList),
    N is RecN + 1, !.

rezy(D, Xs, N, Vss) :-
    D > 0,
    valid_kladas(D, Xs),
    internal_rezy(D, Xs, N, Vss).

(b)
-> definice koncove rekurze je, ze volani posledni funkce v definici predikatu muze vyuzit stack frame tj. po poslednim volani se rovnou vraci vysledek
    (to vede k rekurzi neomezene delky)
    -> nahledem na reseni snadno nahledneme, ze valid_kladas je koncove rekursivni
    -> mohlo by se zdat, ze priklad nize je koncove rekurzivni:
    
        get_klada(D, [X | Xs], [X | NewXs], Kladas) :-
            get_klada(D, Xs, NewXs, Kladas).

        ale neni koncove rekurzivni, kvuli navratu  [X | NewXs] -> jinymi slovy po rekurzivnim volani get_kladas je potreba pridat do vysledku X.

-> dale bylo by mozne predikat rezy predelat tak, aby pouzival akumulator -> tedy z rekurzivniho volani by se vracel rovnou vysledek

(c)
oba predikaty jsem definoval tak, aby byly deterministicke a vsechny pouzite knihovni predikaty jsou take deterministicke (pouzil jsem pouze kostrukt na scitani)
jinymi slovy vypocet se nemuze vydat jinymi smery -> zde by byl nedeterminismus na obtiz

---- 2 -----
(a)

myTakeWhile _ [] = []
myTakeWhile f (x:xs) = 
    if (f x) then (x:(myTakeWhile f xs)) else []

myDropWhile _ [] = []
myDropWhile f (x:xs) = 
     if (f x) then (myDropWhile f xs) else (x:xs)

encode :: Eq a => [a] -> [Either a (a,Int)]
encode [] = []
encode (x:xs) = 
    if count == 1 then ((Left x):rest) else (Right (x, count):rest)
    where 
        fstPart = myTakeWhile (==x) (x:xs)
        count = length fstPart
        restOfList = myDropWhile (==x) xs
        rest = encode restOfList

(d)
ano jsou vyuzity funkce myTakeWhile (ekvivalent k takeWhile) a dropWhile (ekvivalent k dropWhile) 
(nebyl jsem si jist jestli to nejsou jedny ze zakazanych funkci, tak jsem to sam naimplementoval)

(e)
z principu veci funkce encode nemuze pracovat nad nekonecnymi vstupy protoze by se sekvence mohla opakovat do nekonecna
napriklad string "aaaaaaa..." (nekonecne mnoho 'a') by musela vratit neco jako [Right ('a', nekonecno)] coz nejde

funkce decode by principielne mohla byt vyhnocovana line a tedy fungovat pro nekonecne vstupy (dokonce i pri rozsireni na neco jako Right ('a', nekonecno))
a take jsem ji definoval tak, ze funkguje s nekonecnymi vstupy


(b/c)
myReplicate :: Int -> a -> [a]                
myReplicate n x = if (n <= 0) then [] else (x : replicate (n-1) x) 

decode :: [Either a (a,Int)] -> [a]
decode [] = []
decode ((Left x):xs) = (x:(decode xs))
decode ((Right (x, count)):xs) = (myReplicate count x) ++ (decode xs)
